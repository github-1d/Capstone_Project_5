version: 2.1

commands:
    destroy-environment:
        description: Destroy cluster.
        steps:
          - run:
              name: Destroy environments
              when: on_fail
              command: |
                aws cloudformation delete-stack --stack-name eksctl-capstone-cluster
                eksctl delete cluster --region=us-east-2 --name=capstone

jobs:
  setup:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      # Linting step
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

# Build Docker image 

  build_dockerfile:
    docker:
      - image: docker:latest

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      # Build and Save Docker image
      - run:
          name: Build Docker image
          command: |
             sh ./run_docker.sh

      - persist_to_workspace:
          root: ~/
          paths:
            - project/monika-flask-app-latest.tar

# Push docker image to Docker Hub
  push_docker_image:
    docker:
      - image: docker:latest

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - attach_workspace:
          at: ~/

      # Push Docker image
      - run:
          name: Push Docker image
          command: |
            sh ./upload_docker.sh


  security-scan:
    docker:
      - image: amazonlinux:latest

    steps:
      - checkout
      - run:
          name: Security Scan with Trivy
          command: |
            # Install Trivy
            # Install wget to download Trivy RPM package
            yum install -y wget

            # Download and install the Trivy RPM package
            wget https://github.com/aquasecurity/trivy/releases/download/v0.18.3/trivy_0.18.3_Linux-64bit.rpm \
                && yum install -y trivy_0.18.3_Linux-64bit.rpm

            # Run Trivy security scan
            trivy image monika-flask-app

  create_eks_cluster:
    docker:
      - image: amazonlinux:latest

    steps:
      - checkout

      - run:
          name: Install tar and gzip
          command: |
            yum update -y
            yum install -y tar gzip

      - run:
          name: Install kubectl
          command: |
            curl -LO https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client

      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin

      # Create EKS Cluster using eksctl
      - run:
          name: Create EKS Cluster
          command: |
            eksctl create cluster --name capstone --region=us-east-2
            # aws cloudformation create-stack --stack-name my-eks-stack --template-body file://eks-cluster.yaml
            # aws cloudformation wait stack-create-complete --stack-name my-eks-stack

      - destroy-environment

  deploy_eks_cluster:
    docker:
      - image: amazon/aws-cli
      # - image: amazonlinux:latest

    steps:
      - checkout

      - run:
          name: Install tar and gzip
          command: |
            yum update -y
            yum install -y tar gzip

      - run:
          name: Install kubectl
          command: |
            curl -LO https://dl.k8s.io/release/v1.25.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client

      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin

      # update kube config
      - run:
          name: update kube config
          command: |
            aws eks update-kubeconfig --name capstone --region us-east-2

      - run:
          name: verify kube config
          command: |
            kubectl config get-contexts

      - run:
          name: update deployment
          command: |
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml
            kubectl get svc capstone-service

      - destroy-environment


  verify_post_deployment:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout

      - run:
          name: get deployment
          command: |
            kubectl get deployments

      - run:
          name: verify pods
          command: |
            kubectl get pods
    
      - run:
          name: verify services
          command: |
            kubectl get services

workflows:
  version: 2
  build:
    jobs:
      - setup
      - build_dockerfile:  
          requires:
            - setup
      - push_docker_image:
          requires:
            - build_dockerfile
      - security-scan:
          requires:
            - push_docker_image
      - create_eks_cluster:
          requires:
            - security-scan
      - deploy_eks_cluster:
          requires:
            - create_eks_cluster
      - verify_post_deployment:
          requires:
            - deploy_eks_cluster
